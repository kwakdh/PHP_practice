<?php
//--------------------------------------dbms 절차 !--------------------------------------
// 1) 연결하기 --> 반환형이 true or false
//    -------->> 아이디, 비번 , 포트... 등 커넥션이 등장
// 2) 커넥션을 이용 ---> slq문 만들기 , 쿼리 생성 ==> 반환값이 2가지로 나눠짐
//  -------- true or false : sql값의 반환 값이 2차원 배열이 아닌 경우
//  |
//  -------- 2차원 배열    : mysqli_result객체가 반환됨
//                           여기서 어떤식으로 빼올지의 메소드는 mysqli_result객체안에 있다.

//-----------------------------------------------------------------------------------------
//-------------- mysqli에서는 클래스가 2개 쓰인다
// mysqli :  1)연결, 2)쿼리, 3)종료
// ------------mysqli 접속시 문제 생길 시 객체 반환은 되는데 에러넘버와 함께 !!!!
//-----------------------접속후 바로 쿼리로 가면 안됨 !!!!
// ----------접속된지 안된지에따라..접속상태에 대해서 ,,,,, <<예외처리>> 기능 사용하기 !!!!
// mysqli_result : 쿼리 결과값 가지고 있고.... 반환된 2차원 배열로 어떤식으로 빼올지에 대해서 ...
//                    + object(결과를 객체로 반환 가능하다.)
// oop랑 구조적 섞어 쓰지 말자 !!!

//-----------------------------------------------------------------------------------------


// dbms 접속하는 방법 2가지 : native api(dbms 회사에서 제공 ) , abstract layer( 모듈을 바꿔끼우면 되는 것 --jdbc)
// php 에서 dbms 로 접근하기 위해서 mysqli_ :  native {{특정}} dbms 에 특화되어있다 !!!!!!!!!1111
// jdbc : sql 일반화가 되어있다.
// abstraction layer(껍데기만 불러쓰고 안에있는 알맹이는 브리지 만드는 회사가!!! 그래서 끼워준다,
// ODBC / sql 단위로 !!! 왜냐 ? sql은 표준이니까
// 추상이 있는것은 driven manager가 관리한다.
// abstraction layer 의 {장점} dbms 가 바뀌더라고 소스코드가 바뀌지 않는다.
// 단점 ? 속도가 느리다.... 최신 기술을 바로바로 적용할 수없다.
// native api 장점 : 빠른 수행의 속도, 최신기술 도입 / 단점 : 확장성 결여

// abstraction layor .........................
// mysqli 의 가장 큰 장점 : oop기반 ! ->> 듀얼 인터페이스


?>